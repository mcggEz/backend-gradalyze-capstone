-- Create user_grades table aligned with frontend table structure
-- Columns: user_id (fk to users.id), course_code, title, units, grade, semester
-- Composite uniqueness to prevent duplicates per user/course/semester

create table if not exists public.user_grades (
  id bigint generated by default as identity primary key,
  user_id bigint not null references public.users(id) on delete cascade,
  course_code text,
  title text not null,
  units numeric(5,2) not null default 0,
  grade numeric(4,2) not null default 0,
  semester text not null default 'N/A',
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  constraint user_grades_unique unique (user_id, course_code, semester)
);

-- Trigger to update updated_at
create or replace function public.set_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger user_grades_set_updated_at
before update on public.user_grades
for each row
execute function public.set_updated_at();

