-- Ensure grades snapshot column on users and normalized user_grades table exist

-- 1) users.grades JSONB snapshot (for quick UI reads/edits)
alter table public.users 
add column if not exists grades jsonb default '[]'::jsonb;

create index if not exists idx_users_grades_gin 
on public.users using gin (grades);

comment on column public.users.grades is 'Array of grade objects: [{id, subject, courseCode, units, grade, semester}]';


-- 2) Normalized grades table linked to users
create table if not exists public.user_grades (
  id bigint generated by default as identity primary key,
  user_id bigint not null references public.users(id) on delete cascade,
  course_code text,
  title text not null,
  units numeric(5,2) not null default 0,
  grade numeric(4,2) not null default 0,
  semester text not null default 'N/A',
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  constraint user_grades_unique unique (user_id, course_code, semester)
);

-- Trigger to maintain updated_at
create or replace function public.set_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- Recreate trigger idempotently (Postgres doesn't support IF NOT EXISTS for triggers in all versions)
drop trigger if exists user_grades_set_updated_at on public.user_grades;
create trigger user_grades_set_updated_at
before update on public.user_grades
for each row
execute function public.set_updated_at();


